import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';
import { router } from 'expo-router';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';
import { User, Clan } from '@/types';

interface AuthContextProps {
  user: User | null;
  isLoading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (name: string, email: string, password: string, clan: Clan) => Promise<void>;
  signOut: () => Promise<void>;
  setCurrentOnboardingData: (data: Partial<User>) => void;
  currentOnboardingData: Partial<User>;
}

const defaultContext: AuthContextProps = {
  user: null,
  isLoading: true,
  signIn: async () => {},
  signUp: async () => {},
  signOut: async () => {},
  setCurrentOnboardingData: () => {},
  currentOnboardingData: {},
};

const AuthContext = createContext<AuthContextProps>(defaultContext);

// Mock user data for demonstration
const MOCK_USER: User = {
  id: '1',
  name: 'Test User',
  email: 'test@example.com',
  clan: 'onotka',
  totalDaysCompleted: 14,
};

// For storage in dev environment
const STORAGE_KEY = 'user-auth';

async function saveToStorage(key: string, value: string) {
  if (Platform.OS === 'web') {
    localStorage.setItem(key, value);
    return;
  }
  await SecureStore.setItemAsync(key, value);
}

async function getFromStorage(key: string): Promise<string | null> {
  if (Platform.OS === 'web') {
    return localStorage.getItem(key);
  }
  return await SecureStore.getItemAsync(key);
}

async function removeFromStorage(key: string) {
  if (Platform.OS === 'web') {
    localStorage.removeItem(key);
    return;
  }
  await SecureStore.deleteItemAsync(key);
}

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [currentOnboardingData, setCurrentOnboardingData] = useState<Partial<User>>({});

  useEffect(() => {
    const loadUser = async () => {
      try {
        const userJson = await getFromStorage(STORAGE_KEY);
        if (userJson) {
          setUser(JSON.parse(userJson));
          router.replace('/(app)/(tabs)/totem');
        }
      } catch (error) {
        console.error('Failed to load user:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadUser();
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      // In a real app, we'd validate credentials against an API
      // Here we'll just use mock data for demonstration
      await saveToStorage(STORAGE_KEY, JSON.stringify(MOCK_USER));
      setUser(MOCK_USER);
      router.replace('/(app)/(tabs)/totem');
    } catch (error) {
      console.error('Sign in failed:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const signUp = async (name: string, email: string, password: string, clan: Clan) => {
    try {
      setIsLoading(true);
      // In a real app, we'd register the user with an API
      // Here we'll just create mock data
      const newUser: User = {
        id: '2', // Would be generated by backend
        name,
        email,
        clan,
        totalDaysCompleted: 0,
      };

      await saveToStorage(STORAGE_KEY, JSON.stringify(newUser));
      setUser(newUser);
      router.replace('/(app)/(tabs)/totem');
    } catch (error) {
      console.error('Sign up failed:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const signOut = async () => {
    try {
      await removeFromStorage(STORAGE_KEY);
      setUser(null);
      router.replace('/(auth)/login');
    } catch (error) {
      console.error('Sign out failed:', error);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        signIn,
        signUp,
        signOut,
        currentOnboardingData,
        setCurrentOnboardingData,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}